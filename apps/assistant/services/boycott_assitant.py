# import json
# import re
# import subprocess
# import time
#
# from django.conf import settings
# from openai import OpenAI
#
# üîë API-–∫–ª—é—á
# client = OpenAI(api_key=settings.OPENAI_API_KEY)
#
# # üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
# file = client.files.create(
#     file=open("simplified_data.json", "rb"),
#     purpose="assistants"
# )
#
# # üß† –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
# assistant = client.beta.assistants.create(
#     name="–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–æ–π–∫–æ—Ç—É —Ç–æ–≤–∞—Ä–æ–≤",
#     instructions="""
# –¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JSON-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤.
# –ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: name, description_ru, is_boycotted, is_kyrgyz_product.
# –¢—ã –¥–æ–ª–∂–µ–Ω —Å –ø–æ–º–æ—â—å—é Python-–∫–æ–¥–∞ (—á–µ—Ä–µ–∑ code_interpreter) –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ,
# —Å—Ç–∞—Ç—É—Å –±–æ–π–∫–æ—Ç–∞ –∏ —Ç.–¥.
# """,
#     model="gpt-3.5-turbo-1106",
#     tools=[{"type": "code_interpreter"}],
#     tool_resources={
#         "code_interpreter": {
#             "file_ids": [file.id]
#         }
#     }
# )
#
# # üí¨ –ü–æ—Ç–æ–∫
# thread = client.beta.threads.create()
#
#
# # üöÄ –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è
# def ask_assistant(user_input):
#     # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
#     user_input = user_input.encode("utf-8", "ignore").decode("utf-8")
#
#     # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
#     client.beta.threads.messages.create(
#         thread_id=thread.id,
#         role="user",
#         content=user_input
#     )
#
#     # 2. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#     run = client.beta.threads.runs.create(
#         thread_id=thread.id,
#         assistant_id=assistant.id
#     )
#
#     # 3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#     while True:
#         run_status = client.beta.threads.runs.retrieve(
#             thread_id=thread.id,
#             run_id=run.id
#         )
#         if run_status.status == "completed":
#             break
#         elif run_status.status in ["failed", "cancelled", "expired"]:
#             print("‚ÄºÔ∏è –û—à–∏–±–∫–∞:", run_status.last_error.message if run_status.last_error else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
#             return
#         time.sleep(1)
#
#     # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
#     messages = client.beta.threads.messages.list(thread_id=thread.id)
#     for message in reversed(messages.data):
#         if message.role == "assistant":
#             print("üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", message.content[0].text.value)
#             return
#
#
# # üîÅ –¶–∏–∫–ª –æ–±—â–µ–Ω–∏—è
# while True:
#     try:
#         user_input = input("–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ: ")
#         ask_assistant(user_input)
#     except KeyboardInterrupt:
#         print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
#         break

import json
import re
import subprocess


# üîß –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (surrogate pairs)
def clean_surrogates(text):
    return re.sub(r"[\ud800-\udfff]", "", text)


# üîÑ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
def recursive_clean(obj):
    if isinstance(obj, dict):
        return {k: recursive_clean(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [recursive_clean(i) for i in obj]
    elif isinstance(obj, str):
        return clean_surrogates(obj)
    return obj


# üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ JSON
with open("simplified_data.json", encoding="utf-8", errors="ignore") as f:
    raw_data = json.load(f)
    products = recursive_clean(raw_data)


# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
def generate_prompt(query):
    prompt = f"""
–£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤:

{json.dumps(products, ensure_ascii=False, indent=2)}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "{query}"

–ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–±—ä—è—Å–Ω–∏:
- –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ
- –ë–æ–π–∫–æ—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏
- –ö—ã—Ä–≥—ã–∑—Å–∫–∏–π –ª–∏ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç
–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.
"""
    return clean_surrogates(prompt)


# üöÄ –ó–∞–ø—Ä–æ—Å –∫ Ollama
def query_ollama(prompt):
    result = subprocess.run(
        ["ollama", "run", "nous-hermes2"],  # –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'mistral', 'llama3' –∏ —Ç.–¥.
        input=prompt.encode("utf-8"),
        stdout=subprocess.PIPE,
    )
    return result.stdout.decode("utf-8", errors="ignore")


# üîÅ –û–±—â–µ–Ω–∏–µ
while True:
    try:
        question = input("–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ: ")
        prompt = generate_prompt(question)
        response = query_ollama(prompt)
        print("\nüß† –û—Ç–≤–µ—Ç:\n", response)
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        break
