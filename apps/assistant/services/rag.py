from django.conf import settings
from langchain_community.llms.openai import OpenAI
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.chains import RetrievalQA
from langchain.schema import Document
from apps.product.models import Product, Category, Reason


class ProductKnowledgeBase:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG (Retrieval-Augmented Generation)
    """

    def __init__(self, api_key=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        """
        self.api_key = api_key or settings.GOOGLE_API_KEY
        if not self.api_key:
            raise ValueError("OpenAI API key is required")

        self.embeddings = OpenAIEmbeddings(openai_api_key=self.api_key)
        self.vector_store = None
        self.qa_chain = None

    def generate_product_documents(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        """
        documents = []

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        products = Product.objects.all().select_related('category', 'boycott_reason')

        for product in products:
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            content = f"–ò–º—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product.name}\n"
            content += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.name}\n"
            content += f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"

            if product.is_boycotted:
                content += "–°—Ç–∞—Ç—É—Å: –ë–æ–π–∫–æ—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
                if product.boycott_reason:
                    content += f"–ü—Ä–∏—á–∏–Ω–∞ –±–æ–π–∫–æ—Ç–∞: {product.boycott_reason.title}\n"
                    content += f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã: {product.boycott_reason.description}\n"
            else:
                content += "–°—Ç–∞—Ç—É—Å: –ù–µ –±–æ–π–∫–æ—Ç–∏—Ä—É–µ—Ç—Å—è\n"

            if product.is_kyrgyz_product:
                content += "–ú–µ—Å—Ç–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –î–∞, —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞—Ö
            alternatives = product.alternative_products.all()
            if alternatives:
                content += "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
                for alt in alternatives:
                    kyrgyz_status = "–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞" if alt.is_kyrgyz_product else ""
                    content += f"- {alt.name} {kyrgyz_status}\n"

            # –°–æ–∑–¥–∞–µ–º Document –æ–±—ä–µ–∫—Ç (–Ω–µ —Å–ª–æ–≤–∞—Ä—å)
            documents.append(
                Document(
                    page_content=content,
                    metadata={"id": product.id, "name": product.name}
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –±–æ–π–∫–æ—Ç–∞
        reasons = Reason.objects.all()
        for reason in reasons:
            content = f"–ü—Ä–∏—á–∏–Ω–∞ –±–æ–π–∫–æ—Ç–∞: {reason.title}\n"
            content += f"–û–ø–∏—Å–∞–Ω–∏–µ: {reason.description}\n"
            content += "–ü—Ä–æ–¥—É–∫—Ç—ã, –±–æ–π–∫–æ—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ:\n"

            related_products = Product.objects.filter(boycott_reason=reason)
            for product in related_products:
                content += f"- {product.name}\n"

            # –°–æ–∑–¥–∞–µ–º Document –æ–±—ä–µ–∫—Ç (–Ω–µ —Å–ª–æ–≤–∞—Ä—å)
            documents.append(
                Document(
                    page_content=content,
                    metadata={"id": f"reason_{reason.id}", "title": reason.title}
                )
            )

        return documents

    def build_knowledge_base(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —Ü–µ–ø–æ—á–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = self.generate_product_documents()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–ø–ª–∏—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        texts = text_splitter.split_documents(documents)

        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.vector_store = Chroma.from_documents(
            documents=texts,
            embedding=self.embeddings,
            persist_directory="./chroma_db"
        )

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        self.qa_chain = RetrievalQA.from_chain_type(
            llm=OpenAI(temperature=0, openai_api_key=self.api_key),
            chain_type="stuff",
            retriever=self.vector_store.as_retriever(search_kwargs={"k": 3})
        )

    def ask(self, question):
        """
        –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
        """
        if not self.qa_chain:
            raise ValueError("Knowledge base is not built yet. Call build_knowledge_base first.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if "–±–æ–π–∫–æ—Ç" in question.lower() and "–ø–æ—á–µ–º—É" in question.lower():
            # –í–æ–ø—Ä–æ—Å –æ –ø—Ä–∏—á–∏–Ω–µ –±–æ–π–∫–æ—Ç–∞
            query = f"–ü–æ—á–µ–º—É –ø—Ä–æ–¥—É–∫—Ç –±–æ–π–∫–æ—Ç–∏—Ä—É–µ—Ç—Å—è? {question}"
        elif "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤" in question.lower():
            # –í–æ–ø—Ä–æ—Å –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞—Ö
            query = f"–ö–∞–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞? {question}"
        else:
            # –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å
            query = question

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        result = self.qa_chain.run(query)

        return result


class SimpleProductKnowledgeBase:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –±–∞–∑ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.
    """

    def __init__(self):
        pass

    def find_product(self, question: str):
        """
        –ò—â–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
        """
        products = Product.objects.all()
        for product in products:
            if product.name.lower() in question.lower():
                return product
        return None

    def build_answer(self, product: Product):
        """
        –°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É
        """
        if not product:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."

        response = f"üõçÔ∏è <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product.name}\n\n"
        response += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.'}\n\n"

        if product.is_boycotted:
            response += "üö´ <b>–°—Ç–∞—Ç—É—Å:</b> –ë–æ–π–∫–æ—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç\n"
            if product.boycott_reason:
                response += f"‚ùó <b>–ü—Ä–∏—á–∏–Ω–∞ –±–æ–π–∫–æ—Ç–∞:</b> {product.boycott_reason.title}\n"
                response += f"{product.boycott_reason.description}\n\n"
        else:
            response += "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –±–æ–π–∫–æ—Ç–æ–º.\n\n"

        alternatives = product.alternative_products.all()
        if alternatives.exists():
            response += "üîÑ <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b>\n"
            for alt in alternatives:
                response += f"- {alt.name}\n"

        return response

    def ask(self, question: str):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
        """
        product = self.find_product(question)
        return self.build_answer(product)
